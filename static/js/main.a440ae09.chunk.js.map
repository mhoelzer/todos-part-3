{"version":3,"sources":["Components/TodoItem.js","Components/TodoList.js","Components/App.js","serviceWorker.js","index.js"],"names":["TodoItem","_this$props","this","props","title","completed","handleToggleCompletedTodo","handleDestroyOne","react_default","a","createElement","className","type","defaultChecked","onClick","Component","TodoList","state","todos","todoList","clickedTodoId","event","newTodos","_this","map","todo","id","setState","handleAddTodo","makeId","Math","floor","random","keyCode","slice","newlyEnteredTodo","userId","target","value","push","filter","handleDeleteAllCompletedTodos","_this2","placeholder","autoFocus","onKeyDown","Components_TodoItem","key","App","Components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a440ae09.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// pascal case helps with distinguishing from html\n// no state b/c no way to change components with state,; this is just displaying and showing render method\nclass TodoItem extends Component {\n    render() {\n        // if dont do this, change this to match the stuff with todos and this.state\n        const { title, completed, handleToggleCompletedTodo, handleDestroyOne } = this.props;\n        return (\n            // it will be completed\n            // <li className={completed && \"completed\"}> // this will make an error\n            // still want something to return even if empty\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    {/* pass handlers down to children to w/e comp has html tag */}\n                    <input className=\"toggle\" type=\"checkbox\" defaultChecked={completed} onClick={handleToggleCompletedTodo} />\n                    {/* change checked to defaultChecked b/c that's not a react thingy */}\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={handleDestroyOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from \"./TodoItem.js\";\nimport todoList from '../todos.json';\n\nclass TodoList extends Component {\n    state = {\n        todos: todoList\n    };\n\n    // function inside funciton; once called the first time, the first outer funxtion will run and implicitly returns inner function (the event handler); first param is event obj sent from dom; cTI can be accessed inside inner funct\n    handleToggleCompletedTodo = clickedTodoId => event => {\n        // map makes new array to get results in newtodos\n        const newTodos = this.state.todos.map(todo => {\n            // get todo id that matches one was clicked; if this is false, no run\n            if (todo.id === clickedTodoId) {\n                // change completed value/any boolean value (t vs f)\n                todo.completed = !todo.completed;\n            }\n            return todo; // have to return original todo obj\n        });\n        // overwrite todos w/ newtodos \n        this.setState({ todos: newTodos });\n    };\n\n    handleAddTodo = event => {\n        const { todos } = this.state;\n        let makeId = Math.floor(Math.random() * 333666999);\n        if (event.keyCode === 13) { // 13 is the code for enter; could also do event.key == \"Enter\"\n            let newTodos = todos.slice(0); // copy curr arr and return new; can go back in time \n            let newlyEnteredTodo = {\n                userId: 1,\n                id: makeId,\n                title: event.target.value,\n                completed: false\n            };\n            newTodos.push(newlyEnteredTodo);\n            this.setState({ todos: newTodos });\n            event.target.value = \"\";\n        };\n    };\n\n    handleDestroyOne = clickedTodoId => event => {\n        const newTodos = this.state.todos.filter(todo => {\n            if (todo.id === clickedTodoId) {\n                return false\n            }\n            return true;\n        });\n        this.setState({ todos: newTodos });\n    };\n\n    handleDeleteAllCompletedTodos = event => {\n        const newTodos = this.state.todos.filter(todo => {\n            if (todo.completed === true) {\n                return false;\n            }\n            return true;\n        });\n        this.setState({\n            todos: newTodos\n        });\n    };\n\n    render() {\n        // if didnt do this, change todos.map to this.state.todos.map; do use state but not modifying it now\n        const { todos } = this.state;\n        return (\n            <section className=\"todoapp\">\n                <header className=\"header\">\n                    <h1>todos</h1>\n                    <input className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus onKeyDown={this.handleAddTodo} />\n                    {/* the autoFocus auto sleects that input, so it makes it faster for the user; cAn do for loginbox */}\n                </header>\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {/* when put in comp state; when inside the map function, it will be a single todo */}\n                        {todos.map(todo => <TodoItem key={todo.id} title={todo.title} completed={todo.completed} handleToggleCompletedTodo={this.handleToggleCompletedTodo(todo.id)} handleDestroyOne={this.handleDestroyOne(todo.id)} />)}\n                        {/* call the hTCT and pass in the todoid and store inside clickedTodoId var, which causes cTI to be in scope for event function  --> completeTodo can also just be hTCT; it rerenders only 1 when props change */}\n                    </ul>\n                </section>\n                <footer className=\"footer\">\n                    <span className=\"todo-count\"><strong>0</strong> item(s) left</span>\n                    <button className=\"clear-completed\" onClick={this.handleDeleteAllCompletedTodos}>Clear completed</button>\n                </footer>\n            </section>\n        );\n    };\n};  \n\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from \"./TodoList.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <TodoList />\n    );\n  };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}