{"version":3,"sources":["Components/TodoItem.js","Components/TodoHeader.js","Components/TodoFooter.js","Components/TodoList.js","Components/App.js","index.js"],"names":["TodoItem","_this$props","this","props","title","completed","handleToggleCompletedTodo","handleDestroyOne","react_default","a","createElement","className","type","defaultChecked","onClick","Component","TodoHeader","placeholder","autoFocus","onKeyDown","handleAddTodo","TodoFooter","NavLink","exact","to","activeClassName","handleDestroyAllCompletedTodos","TodoList","state","todos","todoList","_this2","Fragment","Components_TodoHeader","map","todo","Components_TodoItem","key","id","Components_TodoFooter","App","clickedTodoId","event","newTodos","_this","setState","makeId","Math","floor","random","keyCode","slice","newlyEnteredTodo","userId","target","value","push","filter","allHandlingProps","length","Switch","Route","path","render","Components_TodoList","Object","assign","ReactDOM","BrowserRouter","basename","process","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.dc9d8b5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// pascal case helps with distinguishing from html\n// no state b/c no way to change components with state,; this is just displaying and showing render method\nclass TodoItem extends Component {\n    render() {\n        // if dont do this, change this to match the stuff with todos and this.state\n        const { title, completed, handleToggleCompletedTodo, handleDestroyOne } = this.props;\n        return (\n            // it will be completed\n            // <li className={completed && \"completed\"}> // this will make an error\n            // still want something to return even if empty\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    {/* pass handlers down to children to w/e comp has html tag */}\n                    <input className=\"toggle\" type=\"checkbox\" defaultChecked={completed} onClick={handleToggleCompletedTodo} />\n                    {/* change checked to defaultChecked b/c that's not a react thingy */}\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={handleDestroyOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\n\nclass TodoHeader extends Component {\n    render() {\n        return (\n            <header className=\"header\">\n                <h1>todos</h1>\n                <input className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus onKeyDown={this.props.handleAddTodo} />\n                {/* the autoFocus auto sleects that input, so it makes it faster for the user; cAn do for loginbox */}\n            </header>\n        );\n    };\n};\n\nexport default TodoHeader;","import React, { Component } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from 'net';\n\nclass TodoFooter extends Component {\n    render() {\n        // if dont do this, change this to match the stuff with todos and this.state\n        // const { title, completed, handleToggleCompletedTodo, handleDestroyOne } = this.props;\n        return (\n            <footer className=\"footer\">\n                {/* should be 0 default; change to {completed} */}\n                <span className=\"todo-count\"><strong>{this.props.completed}</strong> item(s) left</span>\n                <ul className=\"filters\">\n                    {/* if do NavLink, add in activeClassName=\"selected\" and add exact to each, or if have the switch, just put with / in route; or classname={filter === \"all\"?\"seected\":\"\"} */}\n                    <li><NavLink exact to=\"/\" activeClassName=\"selected\">All</NavLink></li>\n                    <li><NavLink exact to=\"/active\" activeClassName=\"selected\">Active</NavLink></li>\n                    <li><NavLink exact to=\"/completed\" activeClassName=\"selected\">Completed</NavLink></li>\n                </ul>\n                <button className=\"clear-completed\" onClick={this.props.handleDestroyAllCompletedTodos}>Clear completed</button>\n            </footer>\n        );\n    };\n};\n\nexport default TodoFooter;","import React, { Component } from 'react';\n// import queryString from \"query-string\";\nimport TodoItem from \"./TodoItem.js\";\nimport todoList from '../todos.json';\nimport TodoHeader from './TodoHeader.js';\nimport TodoFooter from './TodoFooter.js';\n\nclass TodoList extends Component {\n    state = {\n        todos: todoList\n    };    \n    render() {\n        const { todos } = this.props;\n        return (\n            // react.fragment is used when there are multpile big tag things\n            <React.Fragment>\n                <TodoHeader handleAddTodo={this.props.handleAddTodo}/>\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {/* when put in comp state; when inside the map function, it will be a single todo */}\n                        {todos.map(todo => <TodoItem key={todo.id} title={todo.title} completed={todo.completed} handleToggleCompletedTodo={this.props.handleToggleCompletedTodo(todo.id)} handleDestroyOne={this.props.handleDestroyOne(todo.id)} />)}\n                        {/* call the hTCT and pass in the todoid and store inside clickedTodoId var, which causes cTI to be in scope for event function  --> completeTodo can also just be hTCT; it rerenders only 1 when props change */}\n                    </ul>\n                </section>\n                <TodoFooter completed={this.props.completed} handleDestroyAllCompletedTodos={this.props.handleDestroyAllCompletedTodos}/>\n            </React.Fragment>\n        );\n    };\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from \"./TodoList.js\";\nimport { Switch, Route } from \"react-router-dom\";\nimport todoList from '../todos.json';\n\nclass App extends Component {\n  state = {\n    todos: todoList\n  };\n\n  // function inside funciton; once called the first time, the first outer funxtion will run and implicitly returns inner function (the event handler); first param is event obj sent from dom; cTI can be accessed inside inner funct\n  handleToggleCompletedTodo = clickedTodoId => event => {\n    // map makes new array to get results in newtodos\n    const newTodos = this.state.todos.map(todo => {\n      // get todo id that matches one was clicked; if this is false, no run\n      if (todo.id === clickedTodoId) {\n        // change completed value/any boolean value (t vs f)\n        todo.completed = !todo.completed;\n      }\n      return todo; // have to return original todo obj\n    });\n    // overwrite todos w/ newtodos\n    this.setState({ todos: newTodos });\n  };\n\n  handleAddTodo = event => {\n    const { todos } = this.state;\n    let makeId = Math.floor(Math.random() * 333666999);\n    if (event.keyCode === 13) { // 13 is the code for enter; could also do event.key == \"Enter\"\n      let newTodos = todos.slice(0); // copy curr arr and return new; can go back in time \n      let newlyEnteredTodo = {\n        userId: 1,\n        id: makeId,\n        title: event.target.value,\n        completed: false\n      };\n      newTodos.push(newlyEnteredTodo);\n      this.setState({ todos: newTodos });\n      event.target.value = \"\";\n    };\n  };\n\n  handleDestroyOne = clickedTodoId => event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.id === clickedTodoId) {\n        return false\n      }\n      return true;\n    });\n    this.setState({ todos: newTodos });\n  };\n\n  handleDestroyAllCompletedTodos = event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.completed === true) {\n        return false;\n      }\n      return true;\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n  render() {\n    const { todos } = this.state;\n    const allHandlingProps = {\n      handleAddTodo: this.handleAddTodo,\n      handleDestroyOne: this.handleDestroyOne,\n      handleToggleCompletedTodo: this.handleToggleCompletedTodo,\n      handleDestroyAllCompletedTodos: this.handleDestroyAllCompletedTodos,\n      completed: todos.filter(todo => !todo.completed).length\n    };\n    return (\n      <section className=\"todoapp\">\n        <Switch>\n          <Route path=\"/active\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => !todo.completed)} />} />\n          <Route path=\"/completed\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => todo.completed)} />} />\n          <Route path=\"/\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos} />} />\n        </Switch>\n      </section>\n    );\n  };\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './Components/App';\n\nconst Index = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App/>\n    </BrowserRouter>\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Index />, document.getElementById('root'));\n// first param has to be component"],"sourceRoot":""}